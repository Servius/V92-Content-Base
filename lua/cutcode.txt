
function SWEP:HoldTypeAnimations( )
	
	--	This is terrible coding, but I'll clean it later.

	--	If we're owner, a player, valid, and alive then
	if IsValid( self.Owner ) then
	
		if self.Owner:IsPlayer() and self.Owner:Alive() then

			--	Setup a small shortcut
			local owner = self.Owner
			
			--	Bipods are a specialty, so we run them first
			if self:GetVNTSBBipod( ) == true then
				if self:GetVNTSBIronSighted( ) == true then
					if owner:Crouching( ) then
						self:SetWeaponHoldType( VNTHType.LMG[ 4 ] )
						--if VNTDEBUG then owner:ChatPrint( "Bipod hold type " .. VNTHType.LMG[4] ) end
					else
						self:SetWeaponHoldType( VNTHType.LMG[ 2 ] )
						--if VNTDEBUG then owner:ChatPrint( "Bipod hold type " .. VNTHType.LMG[2] ) end
					end
				else
					if owner:Crouching( ) then
						self:SetWeaponHoldType( VNTHType.LMG[ 3 ] )
						--if VNTDEBUG then owner:ChatPrint( "Bipod hold type " .. VNTHType.LMG[3] ) end
					else
						self:SetWeaponHoldType( VNTHType.LMG[ 1 ] )
						--if VNTDEBUG then owner:ChatPrint( "Bipod hold type " .. VNTHType.LMG[1] ) end
					end
				end
			-- if it's not a bipod behave normally
			else
				--	Melees
				if self.HoldMeRight == VNTHType.Fists or self.HoldMeRight == VNTHType.Melee or self.HoldMeRight == VNTHType.Sword or self.HoldMeRight == VNTHType.Knife then
					--if VNTDEBUG then owner:ChatPrint( "Running HoldTypeAnimations( Melee )" ) end
					if self:GetVNTSBHolstered( ) == true then
						if owner:Crouching( ) then
							if self.HoldMeRight == VNTHType.Melee then
								self:SetWeaponHoldType( VNTHType.Melee[ 9 ] )
							elseif self.HoldMeRight == VNTHType.Sword then
								self:SetWeaponHoldType( VNTHType.Sword[ 9 ] )
							elseif self.HoldMeRight == VNTHType.Knife then
								self:SetWeaponHoldType( VNTHType.Knife[ 9 ] )
							else
								self:SetWeaponHoldType( VNTHType.Fists[ 9 ] )
							end
						else
							if self.HoldMeRight == VNTHType.Melee then
								self:SetWeaponHoldType( VNTHType.Melee[ 8 ] )
							elseif self.HoldMeRight == VNTHType.Sword then
								self:SetWeaponHoldType( VNTHType.Sword[ 8 ] )
							elseif self.HoldMeRight == VNTHType.Knife then
								self:SetWeaponHoldType( VNTHType.Knife[ 8 ] )
							else
								self:SetWeaponHoldType( VNTHType.Fists[ 8 ] )
							end
						end
					else
						if self:GetVNTSBIronSighted( ) == true then
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.Melee then
									self:SetWeaponHoldType( VNTHType.Melee[ 4 ] )
								elseif self.HoldMeRight == VNTHType.Sword then
									self:SetWeaponHoldType( VNTHType.Sword[ 4 ] )
								elseif self.HoldMeRight == VNTHType.Knife then
									self:SetWeaponHoldType( VNTHType.Knife[ 4 ] )
								else
									self:SetWeaponHoldType( VNTHType.Fists[ 4 ] )
								end
							else
								if self.HoldMeRight == VNTHType.Melee then
									self:SetWeaponHoldType( VNTHType.Melee[ 2 ] )
								elseif self.HoldMeRight == VNTHType.Sword then
									self:SetWeaponHoldType( VNTHType.Sword[ 2 ] )
								elseif self.HoldMeRight == VNTHType.Knife then
									self:SetWeaponHoldType( VNTHType.Knife[ 2 ] )
								else
									self:SetWeaponHoldType( VNTHType.Fists[ 2 ] )
								end
							end
						else
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.Melee then
									self:SetWeaponHoldType( VNTHType.Melee[ 3 ] )
								elseif self.HoldMeRight == VNTHType.Sword then
									self:SetWeaponHoldType( VNTHType.Sword[ 3 ] )
								elseif self.HoldMeRight == VNTHType.Knife then
									self:SetWeaponHoldType( VNTHType.Knife[ 3 ] )
								else
									self:SetWeaponHoldType( VNTHType.Fists[ 3 ] )
								end
							else
								if self.HoldMeRight == VNTHType.Melee then
									self:SetWeaponHoldType( VNTHType.Melee[ 1 ] )
								elseif self.HoldMeRight == VNTHType.Sword then
									self:SetWeaponHoldType( VNTHType.Sword[ 1 ] )
								elseif self.HoldMeRight == VNTHType.Knife then
									self:SetWeaponHoldType( VNTHType.Knife[ 1 ] )
								else
									self:SetWeaponHoldType( VNTHType.Fists[ 1 ] )
								end
							end
						end
					end
				--	Pistols & Akimbo
				elseif self.HoldMeRight == VNTHType.Pistol or self.HoldMeRight == VNTHType.Revolver or self.HoldMeRight == VNTHType.Dual then
					--if VNTDEBUG then owner:ChatPrint( "Running HoldTypeAnimations( Handguns )" ) end
					if self:GetVNTSBHolstered( ) == true then
						if owner:Crouching( ) then
							if self.HoldMeRight == VNTHType.Dual then
								self:SetWeaponHoldType( VNTHType.Dual[ 9 ] )
							elseif self.HoldMeRight == VNTHType.Revolver then
								self:SetWeaponHoldType( VNTHType.Revolver[ 9 ] )
							else
								self:SetWeaponHoldType( VNTHType.Pistol[ 9 ] )
							end
						else
							if self.HoldMeRight == VNTHType.Dual then
								self:SetWeaponHoldType( VNTHType.Dual[ 8 ] )
							elseif self.HoldMeRight == VNTHType.Revolver then
								self:SetWeaponHoldType( VNTHType.Revolver[ 8 ] )
							else
								self:SetWeaponHoldType( VNTHType.Pistol[ 8 ] )
							end
						end
					else
						if self:GetVNTSBIronSighted( ) == true then
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.Dual then
									self:SetWeaponHoldType( VNTHType.Dual[ 4 ] )
								elseif self.HoldMeRight == VNTHType.Revolver then
									self:SetWeaponHoldType( VNTHType.Revolver[ 4 ] )
								else
									self:SetWeaponHoldType( VNTHType.Pistol[ 4 ] )
								end
							else
								if self.HoldMeRight == VNTHType.Dual then
									self:SetWeaponHoldType( VNTHType.Dual[ 2 ] )
								elseif self.HoldMeRight == VNTHType.Revolver then
									self:SetWeaponHoldType( VNTHType.Revolver[ 2 ] )
								else
									self:SetWeaponHoldType( VNTHType.Pistol[ 2 ] )
								end
							end
						else
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.Dual then
									self:SetWeaponHoldType( VNTHType.Dual[ 3 ] )
								elseif self.HoldMeRight == VNTHType.Revolver then
									self:SetWeaponHoldType( VNTHType.Revolver[ 3 ] )
								else
									self:SetWeaponHoldType( VNTHType.Pistol[ 3 ] )
								end
							else
								if self.HoldMeRight == VNTHType.Dual then
									self:SetWeaponHoldType( VNTHType.Dual[ 1 ] )
								elseif self.HoldMeRight == VNTHType.Revolver then
									self:SetWeaponHoldType( VNTHType.Revolver[ 1 ] )
								else
									self:SetWeaponHoldType( VNTHType.Pistol[ 1 ] )
								end
							end
						end
					end
				--	SMGs, Foregrips, Carbines, Rifles
				elseif self.HoldMeRight == VNTHType.SMG or self.HoldMeRight == VNTHType.Carbine or self.HoldMeRight == VNTHType.Rifle or self.HoldMeRight == VNTHType.ForeGrip then
					--if VNTDEBUG then owner:ChatPrint( "Running HoldTypeAnimations( Standard Arms )" ) end
					if self:GetVNTSBHolstered( ) == true then
						if owner:Crouching( ) then
							if self.HoldMeRight == VNTHType.SMG then
								self:SetWeaponHoldType( VNTHType.SMG[ 9 ] )
							elseif self.HoldMeRight == VNTHType.Carbine then
								self:SetWeaponHoldType( VNTHType.Carbine[ 9 ] )
							elseif self.HoldMeRight == VNTHType.ForeGrip then
								self:SetWeaponHoldType( VNTHType.ForeGrip[ 9 ] )
							else
								self:SetWeaponHoldType( VNTHType.Rifle[ 9 ] )
							end
						else
							if self.HoldMeRight == VNTHType.SMG then
								self:SetWeaponHoldType( VNTHType.SMG[ 8 ] )
							elseif self.HoldMeRight == VNTHType.Carbine then
								self:SetWeaponHoldType( VNTHType.Carbine[ 8 ] )
							elseif self.HoldMeRight == VNTHType.ForeGrip then
								self:SetWeaponHoldType( VNTHType.ForeGrip[ 8 ] )
							else
								self:SetWeaponHoldType( VNTHType.Rifle[ 8 ] )
							end
						end
					else
						if self:GetVNTSBIronSighted( ) == true then
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.SMG then
									self:SetWeaponHoldType( VNTHType.SMG[ 4 ] )
								elseif self.HoldMeRight == VNTHType.Carbine then
									self:SetWeaponHoldType( VNTHType.Carbine[ 4 ] )
								elseif self.HoldMeRight == VNTHType.ForeGrip then
									self:SetWeaponHoldType( VNTHType.ForeGrip[ 4 ] )
								else
									self:SetWeaponHoldType( VNTHType.Rifle[ 4 ] )
								end
							else
								if self.HoldMeRight == VNTHType.SMG then
									self:SetWeaponHoldType( VNTHType.SMG[ 2 ] )
								elseif self.HoldMeRight == VNTHType.Carbine then
									self:SetWeaponHoldType( VNTHType.Carbine[ 2 ] )
								elseif self.HoldMeRight == VNTHType.ForeGrip then
									self:SetWeaponHoldType( VNTHType.ForeGrip[ 2 ] )
								else
									self:SetWeaponHoldType( VNTHType.Rifle[ 2 ] )
								end
							end
						else
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.SMG then
									self:SetWeaponHoldType( VNTHType.SMG[ 3 ] )
								elseif self.HoldMeRight == VNTHType.Carbine then
									self:SetWeaponHoldType( VNTHType.Carbine[ 3 ] )
								elseif self.HoldMeRight == VNTHType.ForeGrip then
									self:SetWeaponHoldType( VNTHType.ForeGrip[ 3 ] )
								else
									self:SetWeaponHoldType( VNTHType.Rifle[ 3 ] )
								end
							else
								if self.HoldMeRight == VNTHType.SMG then
									self:SetWeaponHoldType( VNTHType.SMG[ 1 ] )
								elseif self.HoldMeRight == VNTHType.Carbine then
									self:SetWeaponHoldType( VNTHType.Carbine[ 1 ] )
								elseif self.HoldMeRight == VNTHType.ForeGrip then
									self:SetWeaponHoldType( VNTHType.ForeGrip[ 1 ] )
								else
									self:SetWeaponHoldType( VNTHType.Rifle[ 1 ] )
								end
							end
						end
					end
				--	LMGs, Shotguns, Snipers
				elseif self.HoldMeRight == VNTHType.LMG or self.HoldMeRight == VNTHType.Shotgun or self.HoldMeRight == VNTHType.Sniper then
					--if VNTDEBUG then owner:ChatPrint( "Running HoldTypeAnimations( Specified Arms )" ) end
					if self:GetVNTSBHolstered( ) == true then
						if owner:Crouching( ) then
							if self.HoldMeRight == VNTHType.LMG then
								self:SetWeaponHoldType( VNTHType.LMG[ 9 ] )
							elseif self.HoldMeRight == VNTHType.Sniper then
								self:SetWeaponHoldType( VNTHType.Sniper[ 9 ] )
							else
								self:SetWeaponHoldType( VNTHType.Shotgun[ 9 ] )
							end
						else
							if self.HoldMeRight == VNTHType.LMG then
								self:SetWeaponHoldType( VNTHType.LMG[ 8 ] )
							elseif self.HoldMeRight == VNTHType.Sniper then
								self:SetWeaponHoldType( VNTHType.Sniper[ 8 ] )
							else
								self:SetWeaponHoldType( VNTHType.Shotgun[ 8 ] )
							end
						end
					else
						if self:GetVNTSBIronSighted( ) == true then
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.LMG then
									self:SetWeaponHoldType( VNTHType.LMG[ 4 ] )
								elseif self.HoldMeRight == VNTHType.Sniper then
									self:SetWeaponHoldType( VNTHType.Sniper[ 4 ] )
								else
									self:SetWeaponHoldType( VNTHType.Shotgun[ 4 ] )
								end
							else
								if self.HoldMeRight == VNTHType.LMG then
									self:SetWeaponHoldType( VNTHType.LMG[ 2 ] )
								elseif self.HoldMeRight == VNTHType.Sniper then
									self:SetWeaponHoldType( VNTHType.Sniper[ 2 ] )
								else
									self:SetWeaponHoldType( VNTHType.Shotgun[ 2 ] )
								end
							end
						else
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.LMG then
									self:SetWeaponHoldType( VNTHType.LMG[ 3 ] )
								elseif self.HoldMeRight == VNTHType.Sniper then
									self:SetWeaponHoldType( VNTHType.Sniper[ 3 ] )
								else
									self:SetWeaponHoldType( VNTHType.Shotgun[ 3 ] )
								end
							else
								if self.HoldMeRight == VNTHType.LMG then
									self:SetWeaponHoldType( VNTHType.LMG[ 1 ] )
								elseif self.HoldMeRight == VNTHType.Sniper then
									self:SetWeaponHoldType( VNTHType.Sniper[ 1 ] )
								else
									self:SetWeaponHoldType( VNTHType.Shotgun[ 1 ] )
								end
							end
						end
					end
				--	Grenade Launchers, Rocket Launchers, Support Weapons
				elseif self.HoldMeRight == VNTHType.GLauncher or self.HoldMeRight == VNTHType.RLauncher or self.HoldMeRight == VNTHType.Support then
					--if VNTDEBUG then owner:ChatPrint( "Running HoldTypeAnimations( Explosives )" ) end
					if self:GetVNTSBHolstered( ) == true then
						if owner:Crouching( ) then
							if self.HoldMeRight == VNTHType.GLauncher then
								self:SetWeaponHoldType( VNTHType.GLauncher[ 9 ] )
							elseif self.HoldMeRight == VNTHType.RLauncher then
								self:SetWeaponHoldType( VNTHType.RLauncher[ 9 ] )
							else
								self:SetWeaponHoldType( VNTHType.Support[ 9 ] )
							end
						else
							if self.HoldMeRight == VNTHType.GLauncher then
								self:SetWeaponHoldType( VNTHType.GLauncher[ 8 ] )
							elseif self.HoldMeRight == VNTHType.RLauncher then
								self:SetWeaponHoldType( VNTHType.RLauncher[ 8 ] )
							else
								self:SetWeaponHoldType( VNTHType.Support[ 8 ] )
							end
						end
					else
						if self:GetVNTSBIronSighted( ) == true then
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.GLauncher then
									self:SetWeaponHoldType( VNTHType.GLauncher[ 4 ] )
								elseif self.HoldMeRight == VNTHType.RLauncher then
									self:SetWeaponHoldType( VNTHType.RLauncher[ 4 ] )
								else
									self:SetWeaponHoldType( VNTHType.Support[ 4 ] )
								end
							else
								if self.HoldMeRight == VNTHType.GLauncher then
									self:SetWeaponHoldType( VNTHType.GLauncher[ 2 ] )
								elseif self.HoldMeRight == VNTHType.RLauncher then
									self:SetWeaponHoldType( VNTHType.RLauncher[ 2 ] )
								else
									self:SetWeaponHoldType( VNTHType.Support[ 2 ] )
								end
							end
						else
							if owner:Crouching( ) then
								if self.HoldMeRight == VNTHType.GLauncher then
									self:SetWeaponHoldType( VNTHType.GLauncher[ 3 ] )
								elseif self.HoldMeRight == VNTHType.RLauncher then
									self:SetWeaponHoldType( VNTHType.RLauncher[ 3 ] )
								else
									self:SetWeaponHoldType( VNTHType.Support[ 3 ] )
								end
							else
								if self.HoldMeRight == VNTHType.GLauncher then
									self:SetWeaponHoldType( VNTHType.GLauncher[ 1 ] )
								elseif self.HoldMeRight == VNTHType.RLauncher then
									self:SetWeaponHoldType( VNTHType.RLauncher[ 1 ] )
								else
									self:SetWeaponHoldType( VNTHType.Support[ 1 ] )
								end
							end
						end
					end
				else
					--if VNTDEBUG then owner:ChatPrint( "Running HoldTypeAnimations( ERROR )" ) end
					--	Send an obvious message that you fucked up
					self:SetWeaponHoldType( "magic" )
				end
			end
		end
	end
end

if CLIENT then
	local metaP = FindMetaTable( "Player" )
	function metaP:SelectWeapon( class )
		if not ( self:HasWeapon( class ) ) then return end
		self.DoWeaponSwitch = self:GetWeapon( class )
	end

	hook.Add( "CreateMove" , "WeaponSwitch" , function( cmd )
		if not ( IsValid( LocalPlayer( ).DoWeaponSwitch ) ) then return end
		
		cmd:SelectWeapon( LocalPlayer( ).DoWeaponSwitch )
		
		if ( LocalPlayer( ):GetActiveWeapon( ) == LocalPlayer( ).DoWeaponSwitch ) then
			LocalPlayer( ).DoWeaponSwitch = nil
		end
	end )
end

		LocalPlayer():SelectWeapon( self.WeaponName )
	
	
	
function SWEP:ToggleOutAndIn( )
	self:Holster( )

		self.Owner:SelectWeapon( "v92_int_blank" )
	if SERVER then
	end --	This has got to be 

	self:Deploy( )

		self.Owner:SelectWeapon( self.WeaponName )
	if SERVER then
	end --	the dumbest fix,

	self:Deploy( )

		self.Owner:SelectWeapon( "v92_int_blank" )
	if SERVER then
	end --	but damned

	self:Deploy( )

		self.Owner:SelectWeapon( self.WeaponName )
	if SERVER then
	end --	if it works

	self:Deploy( )
end

		--if self.WeaponType == 6 then
			--self:SetVNTSBGLauncher( true )
		--end

		--local curWep = self.Owner:GetWeapon(self)
		--	if we're holstered then
		if self:GetVNTSBHolstered( ) == true then
			--	if it's a pistol
			if self.WeaponType == 1 or self.WeaponType == 2 then
				--	play the normal animation
				self:SetWeaponHoldType( "normal" )
			else
				--	else it's not
				--	If we crouching then
				if self.Owner:KeyDown( IN_DUCK ) then
					--	There's no crouch for passive, so play the normal
					self:SetWeaponHoldType( "normal" )
				else
					--	else we're standing
					--	play the passive anim
					self:SetWeaponHoldType( "passive" )
				end
			end
		else
			--	Else we're not holstered 
			--	reset our hold type
			self:SetWeaponHoldType( self.HoldType )
		end
	--[[
	if self:GetVNTSBHolstered() == true then
		if	self.Owner:KeyDown(IN_DUCK) then
			self:SetWeaponHoldType(self.HoldType)
		else
			self:SetWeaponHoldType("passive")
		end
	else
		self:SetWeaponHoldType(self.HoldType)
	end
	--]]
	
function SWEP:BulletPenetration( attacker , tracePen , damageinfo , bounceNum )
	
	--	Are we valid?
	if self.CanPenetrate == true then
		
		--	tracePen = Penetration Trace
		--	traceRic = Richochet Trace
		
		local bounceNum = bounceNum or 1
		local penDir = tracePen.Normal * self.StrongPenetration
		local damageMul = 0.5
		local damageInfo = damageInfo or self.Primary.Damage or self.Secondary.Damage
		
		local traceRic = { }
		traceRic.endpos = tracePen.HitPos
		traceRic.start = tracePen.HitPos + penDir
		traceRic.mask = MASK_SHOT
		traceRic.filter = { self.Owner }
		local traceRic = util.TraceLine( traceRic )
		
		--	if we hit sand or skybox, or we've rebounded too much, or the trace is too thicc
		--if  ( traceRic.StartSolid or traceRic.Fraction >= 1.0 or tracePen.Fraction <= 0.0 ) then
			--print( "Trace ended because it hit something invalid" )
		if ( tracePen.HitSky ) or ( bounceNum > GetConVarNumber( "VNT_SWep_Base_RichochetLimit" ) ) or ( tracePen.MatType == ( bit.bor( MAT_SAND , MAT_DEFAULT ) ) ) then
			--	Quit
			return false
		
		--	else continue
		else

			--	If mat type is a weak type then
			if ( tracePen.MatType == ( bit.bor( MAT_WOOD , MAT_DIRT , MAT_GLASS , MAT_FLESH , MAT_ALIENFLESH , MAT_PLASTIC , MAT_VENT , MAT_COMPUTER ) ) ) then
				print( "hit a weak pen material" )
				--	Weak pen
				penDir = tracePen.Normal * ( self.WeakPenetration )
			--	if you hit metal
			elseif ( tracePen.MatType == MAT_METAL ) then
				penDir = tracePen.Normal * ( self.StrongPenetration - 3 )
			print( "hit a metal" )
			end

			
			-- The following controls damage depreciation per penetration
			
			--	Weak materials
			if tracePen.MatType == ( bit.bor( MAT_FOLIAGE , MAT_PLASTIC ) ) then
				damageMul = 0.95
				print( "hit a weaker material type" )
			elseif tracePen.MatType == ( bit.bor( MAT_CONCRETE , MAT_FLESH , MAT_ALIENFLESH , MAT_GRATE , MAT_COMPUTER , MAT_TILE , MAT_VENT ) ) then
				damageMul = 0.9
				print( "hit a weak material type" )
			--	Dense materials
			elseif tracePen.MatType == ( bit.bor( MAT_SLOSH , MAT_DIRT , MAT_GRASS , MAT_METAL ) ) then
				damageMul = 0.85
				print( "hit a dense material type" )
			--	Shields
			elseif tracePen.MatType == ( bit.bor( MAT_WARPSHIELD ) ) then
				damageMul = 0.1
				print( "hit a shield material type" )
			--	No effect on bullets
			elseif tracePen.MatType == ( bit.bor( MAT_EGGSHELL ) ) then
				damageMul = 1
				print( "hit a egg material type" )
			--	Standard depreciation
			else
				damageMul = 0.8
			end
		end

		-- tr = traceRic
		-- trace = tracePen

		local distance = self.Primary.Distance or 56756
		local bulletData = {}
		bulletData.Attacker = attacker
		bulletData.Damage = ( damageInfo * damageMul )
		bulletData.Distance = distance
		bulletData.Dir = traceRic.Normal
		bulletData.Force = ( damageInfo * damageMul * 2 )
		bulletData.HullSize = 2
		bulletData.Num = 1
		bulletData.Spread = Vector( 0 , 0 , 0 )
		bulletData.Src = tracePen.HitPos
		bulletData.TracerType = 1

		if self.CustomTracer != nil then
			bulletData.TracerName = self.CustomTracer
		end

		bulletData.Callback = function( attacker , tracePen , damageinfo , bounceNum )
			return self:BulletPenetration( attacker , tracePen , damageinfo , bounceNum + 1 )
		end

		if SERVER then
			util.ScreenShake( traceRic.HitPos , 2.2 , 0.1 , 0.3 , 38 )
		end

		self:FireBullets( bulletData , true )

		return true
	end
end

function SWEP:BulletRichochet( attacker , tracePen , damageInfo , bounceNum )
	local attacker = attacker
	local tracePen = tracePen
	local damageInfo = damageInfo
	local bounceNum = bounceNum
	return self:BulletPenetration( attacker , tracePen , damageinfo , bounceNum )
end
				--	Play our firing animations
				self:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
				
				self:Recoil( 0.225 , true )
				
				
function SWEP:FireBulletL( dmg , recoil , numbul , cone )
	numbul = numbul or 1
	cone = cone or 0.01

	if self.CurrentMode == 1 then
		self.SingleAccom = 0.2
	else
		self.SingleAccom = 0
	end

	if not self.Owner:OnGround( ) then
		self.CrouchPane = 1.4
	elseif self.Owner.Incapped == true then
		self.CrouchPane = 0.5 - self.SingleAccom
	elseif self.Owner:Crouching( ) then
		--[[elseif self.Owner.IsProne() == true then
		if self.Owner:GetVelocity():Length() >= 30 then
			self.CrouchPane = 0.425 - self.SingleAccom
		else
			self.CrouchPane = 0.2 - self.SingleAccom
		end--]]
		if self.Owner:GetVelocity( ):Length( ) >= 30 then
			self.CrouchPane = 0.65 - self.SingleAccom
		else
			self.CrouchPane = 0.365 - self.SingleAccom
		end
	else
		if self.Owner:GetVelocity( ):Length( ) >= 100 then
			self.CrouchPane = 1.05 - self.SingleAccom
		else
			self.CrouchPane = 0.95 - self.SingleAccom
		end
	end

	if not self.SmokeFire then
		self.SmokeFire = 1
	end

	self.SmokeFire = self.SmokeFire + 1

	if SERVER then
		if self.Primary.Cone < self.Primary.MaxCone then
			self.Primary.Cone = self.Primary.Cone + ( self.Primary.ConeCoil * 1.5 ) * self.CrouchPane

			if self.Primary.Cone < self.BaseCone then
				self.Primary.Cone = self.BaseCone
			end

			if self:GetVNTSBIronSighted( ) == true or self:GetVNTSBBipod( ) == true then
				if self.Primary.Cone > self.Primary.MaxCone * 0.9 then
					self.Primary.Cone = self.Primary.MaxCone * 0.9
				end
			else
				if self.Primary.Cone > self.Primary.MaxCone * 1.75 then
					self.Primary.Cone = self.Primary.MaxCone * 1.75
				end
			end
		end
	end

	local bullet = { }
	bullet.Num = numbul
	bullet.Src 		= self.Owner:GetShootPos()
	--bullet.Src = self:LookupAttachment( self.MuzzleAttachLeft )
	bullet.Dir = self.Owner:GetAimVector( )

	if self:GetVNTSBIronSighted( ) == true and self:GetVNTSBBipod( ) == false then
		bullet.Spread = Vector( cone * 0.8 , cone * 0.8 , 0 )
	elseif self:GetVNTSBIronSighted( ) == true and self:GetVNTSBBipod( ) == true then
		bullet.Spread = Vector( cone * 0.4 , cone * 0.4 , 0 )
	elseif self:GetVNTSBIronSighted( ) == false and self:GetVNTSBBipod( ) == true then
		bullet.Spread = Vector( cone * 0.5 , cone * 0.5 , 0 )
	else
		bullet.Spread = Vector( cone , cone , 0 )
	end

	if self.UseTracer == true then
		bullet.TracerType = math.random( 0 , self.TracerRandomizer )
	else
		bullet.TracerType = 0
	end

	if self.CustomTracer ~= nil then
		bullet.TracerName = self.CustomTracer
	end

	bullet.Force = 1 * dmg
	bullet.Damage = dmg
	bullet.Attacker = self.Owner
	bullet.Callback = function( a , b , c ) return self:BPenetration( a , b , c ) end

	if SERVER then
		self.Owner:LagCompensation( true )
	end

	self:FireBullets( bullet )

	if SERVER then
		self.Owner:LagCompensation( false )
	end
end --	Controls bullets

function SWEP:Recoil( int , bool )
end --	Controls recoil

function SWEP:FireBullet( damage , recoil , numberOfShots , firingCone , force )
	local damage = self.Primary.Damage or 1
	local numberOfShots = self.Primary.NumShots or 1
	local firingCone = self.Primary.Cone or 0.01
	local force = self.Primary.Force or 5

	if self.CurrentMode == 1 then
		self.SingleAccom = 0.2
	else
		self.SingleAccom = 0
	end

	if not self.Owner:OnGround( ) then
		self.CrouchPane = 1.4
	elseif self.Owner.Incapped == true then
		self.CrouchPane = 0.5 - self.SingleAccom
	elseif self.Owner:Crouching( ) then
		--[[elseif self.Owner.IsProne() == true then
		if self.Owner:GetVelocity():Length() >= 30 then
			self.CrouchPane = 0.425 - self.SingleAccom
		else
			self.CrouchPane = 0.2 - self.SingleAccom
		end--]]
		if self.Owner:GetVelocity( ):Length( ) >= 30 then
			self.CrouchPane = 0.65 - self.SingleAccom
		else
			self.CrouchPane = 0.365 - self.SingleAccom
		end
	else
		if self.Owner:GetVelocity( ):Length( ) >= 100 then
			self.CrouchPane = 1.05 - self.SingleAccom
		else
			self.CrouchPane = 0.95 - self.SingleAccom
		end
	end

	if not self.SmokeFire then
		self.SmokeFire = 1
	end

	self.SmokeFire = self.SmokeFire + 1

	if SERVER then
		if self.Primary.Cone < self.Primary.MaxCone then
			self.Primary.Cone = self.Primary.Cone + ( self.Primary.ConeCoil * 1.5 ) * self.CrouchPane

			if self.Primary.Cone < self.BaseCone then
				self.Primary.Cone = self.BaseCone
			end

			if self:GetVNTSBIronSighted( ) == true or self:GetVNTSBBipod( ) == true then
				if self.Primary.Cone > self.Primary.MaxCone * 0.9 then
					self.Primary.Cone = self.Primary.MaxCone * 0.9
				end
			else
				if self.Primary.Cone > self.Primary.MaxCone * 1.75 then
					self.Primary.Cone = self.Primary.MaxCone * 1.75
				end
			end
		end
	end

	local bullet = { }
	bullet.Num = numberOfShots
	bullet.Src 		= self.Owner:GetShootPos()
	--bullet.Src = self:LookupAttachment( self.MuzzleAttach )
	bullet.Dir = self.Owner:GetAimVector( )

	if self:GetVNTSBIronSighted( ) == true and self:GetVNTSBBipod( ) == false then
		bullet.Spread = Vector( cone * 0.8 , cone * 0.8 , 0 )
	elseif self:GetVNTSBIronSighted( ) == true and self:GetVNTSBBipod( ) == true then
		bullet.Spread = Vector( cone * 0.4 , cone * 0.4 , 0 )
	elseif self:GetVNTSBIronSighted( ) == false and self:GetVNTSBBipod( ) == true then
		bullet.Spread = Vector( cone * 0.5 , cone * 0.5 , 0 )
	else
		bullet.Spread = Vector( cone , cone , 0 )
	end

	if self.UseTracer == true then
		bullet.TracerType = math.random( 0 , self.TracerRandomizer )
	else
		bullet.TracerType = 0
	end

	if self.CustomTracer ~= nil then
		bullet.TracerName = self.CustomTracer
	end

	bullet.Force = 1 * damage
	bullet.Damage = damage
	bullet.Attacker = self.Owner
	bullet.Callback = function( a , b , c ) return self:BPenetration( a , b , c ) end

	if SERVER then
		self.Owner:LagCompensation( true )
	end

	self:FireBullets( bullet )

	if SERVER then
		self.Owner:LagCompensation( false )
	end

	--Do a trace and check where the bullet will hit
	local TrData = {}
		TrData.start = bulletOrigin
		TrData.endpos = endPos				
		TrData.filter =  {}
	local trace = util.TraceLine(TrData)

	if CLIENT then
		if(!trace.HitSky)then
			local FXBulletImpact = EffectData()
				FXBulletImpact:SetOrigin(trace.HitPos)
				FXBulletImpact:SetScale(0.5)
				FXBulletImpact:SetRadius(trace.MatType)
				FXBulletImpact:SetNormal(trace.HitNormal)
			util.Effect("fx_impact_bullet",FXBulletImpact)
		end
	end
end --	Controls bullets

function SWEP:FireViewPunches( )
	--	If we're owner, a player, valid, and alive then
	if self.Owner and self.Owner:IsPlayer( ) and self.Owner:IsValid( ) and self.Owner:Alive( ) then
		--	If our GL is deployed then
		if self:GetVNTSBGLauncher( ) == true then
			--	Reset our view punch
			self.Owner:ViewPunchReset( )

			--	Add a random punch
			if self.WeaponType > 2 then
				self.Owner:ViewPunch( Angle( table.Random( self.RiflePunchesY ) * 1 , table.Random( self.RiflePunchesX ) * self.Primary.Cone * 4 , 0 ) )
			elseif self.WeaponType == 2 then
				self.Owner:ViewPunch( Angle( table.Random( self.PistolPunchesY ) * 1 , table.Random( self.PistolPunchesX ) * self.Primary.Cone * 4 , 0 ) )
			end
		else
			--	else our GL isn't out
			--	If we're in iron sights then
			if self:GetVNTSBIronSighted( ) == true and self.WeaponType ~= 1 then
				--	Reset our view punch
				self.Owner:ViewPunchReset( )

				--	Add a smaller random punch
				if self.WeaponType > 2 then
					self.Owner:ViewPunch( Angle( table.Random( self.RiflePunchesY ) * 0.5 , table.Random( self.RiflePunchesX ) * self.Primary.Cone * 3 , 0 ) )
				elseif self.WeaponType == 2 then
					self.Owner:ViewPunch( Angle( table.Random( self.PistolPunchesY ) * 0.5 , table.Random( self.PistolPunchesX ) * self.Primary.Cone * 3 , 0 ) )
				end
			elseif self:GetVNTSBIronSighted( ) == false and self.WeaponType ~= 1 then
				--	Reset our view punch
				self.Owner:ViewPunchReset( )

				--	Add a bigger random punch
				if self.WeaponType > 2 then
					self.Owner:ViewPunch( Angle( table.Random( self.RiflePunchesY ) * 1 , table.Random( self.RiflePunchesX ) * self.Primary.Cone * 6 , 0 ) )
				elseif self.WeaponType == 2 then
					self.Owner:ViewPunch( Angle( table.Random( self.PistolPunchesY ) * 1 , table.Random( self.PistolPunchesX ) * self.Primary.Cone * 6 , 0 ) )
				end
			else
				self.Owner:ViewPunch( Angle( table.Random( self.RiflePunchesY ) * 4 , table.Random( self.RiflePunchesX ) * self.Primary.Cone * 10 , 0 ) )
			end
		end
	end
end --	View Punches

function SWEP:BulletPenetrate( bouncenum , attacker , tr , dmginfo , isplayer )
	local DoDefaultEffect = true
	if ( tr.MatType == MAT_SAND ) or ( tr.Entity:IsPlayer( ) or tr.Entity:IsNPC( ) ) then return end
	if ( bouncenum > 3 ) then return end
	local PenetrationDirection = tr.Normal * self.MaxPenetration

	if ( tr.MatType == MAT_METAL ) then
		PenetrationDirection = tr.Normal * ( self.MaxPenetration - 3 )
	end

	if ( tr.MatType == MAT_DIRT or tr.MatType == MAT_WOOD or tr.MatType == MAT_FLESH or tr.MatType == MAT_ALIENFLESH or tr.MatType == MAT_GLASS or tr.MatType == MAT_PLASTIC or tr.MatType == MAT_VENT or tr.MatType == MAT_COMPUTER ) then
		PenetrationDirection = tr.Normal * self.MaxWoodPenetration
	end

	local trace = { }
	trace.endpos = tr.HitPos
	trace.start = tr.HitPos + PenetrationDirection
	trace.mask = MASK_SHOT
	trace.filter = { self.Owner }
	local trace = util.TraceLine( trace )
	if ( trace.StartSolid or trace.Fraction >= 1.0 or tr.Fraction <= 0.0 ) then return end
	local DMGX = 0.5

	if ( tr.MatType == MAT_CONCRETE ) then
		DMGX = 0.9
	elseif ( tr.MatType == MAT_METAL ) then
		DMGX = 0.85
	elseif ( tr.MatType == MAT_WOOD ) then
		DMGX = 0.8
	elseif ( tr.MatType == MAT_FLESH or tr.MatType == MAT_ALIENFLESH ) then
		DMGX = 0.9
	elseif ( tr.MatType == MAT_GLASS ) then
		DMGX = 0.88
	elseif ( tr.MatType == MAT_GRATE ) then
		DMGX = 0.9
	elseif ( tr.MatType == MAT_PLASTIC ) then
		DMGX = 0.95
	elseif ( tr.MatType == MAT_VENT ) then
		DMGX = 0.92
	elseif ( tr.MatType == MAT_ANTLION ) then
		DMGX = 0.8
	elseif ( tr.MatType == MAT_DIRT ) then
		DMGX = 0.82
	elseif ( tr.MatType == MAT_SAND ) then
		DMGX = 0.65
	elseif ( tr.MatType == MAT_FOLIAGE ) then
		DMGX = 0.95
	elseif ( tr.MatType == MAT_COMPUTER ) then
		DMGX = 0.9
	elseif ( tr.MatType == MAT_SLOSH ) then
		DMGX = 0.85
	elseif ( tr.MatType == MAT_TILE ) then
		DMGX = 0.9
	end

	local bullet = {
		Num = 1 ,
		Src = trace.HitPos ,
		Dir = tr.Normal ,
		Spread = Vector( 0 , 0 , 0 ) ,
		TracerType = 1 ,
		Force = 2 * dmginfo:GetDamage( ) * DMGX ,
		Damage = ( dmginfo:GetDamage( ) * DMGX ) ,
		HullSize = 2 ,
		Attacker = attacker
	}

	bullet.Callback = function( a , b , c )
		if ( self.Ricochet ) then return self:RicochetCallback( bouncenum + 1 , a , b , c ) end
	end

	timer.Simple( 0.01 , function( )
		attacker.FireBullets( attacker , bullet , true )
	end )

	return true
end --	Controls penetration

function SWEP:RicochetCallback( bouncenum , attacker , tr , dmginfo )
	local DoDefaultEffect = true
	if ( tr.HitSky ) then return end

	if ( self.CanPenetrate ) and ( self:BulletPenetrate( bouncenum , attacker , tr , dmginfo ) ) then
		return {
			damage = true ,
			effects = DoDefaultEffect
		}
	end

	if ( SERVER ) then
		util.ScreenShake( tr.HitPos , 2.2 , 0.1 , 0.3 , 38 )
	end

	if ( self.Ricochet == true ) then
		return {
			damage = true ,
			effects = DoDefaultEffect
		}
	end

	if ( bouncenum > self.MaxRicochet ) then return end
	local trace = { }
	trace.start = tr.HitPos
	trace.endpos = trace.start + ( tr.HitNormal * 16384 )
	local trace = util.TraceLine( trace )
	local DotProduct = tr.HitNormal:Dot( tr.Normal * -1 )

	local bullet = {
		Num = 1 ,
		Src = tr.HitPos + ( tr.HitNormal * 5 ) ,
		Dir = ( ( 2 * tr.HitNormal * DotProduct ) + tr.Normal ) + ( VectorRand( ) * 0.05 ) ,
		Spread = Vector( 0 , 0 , 0 ) ,
		TracerType = 1 ,
		TracerName = "" ,
		Force = dmginfo:GetDamage( ) * 0.9 ,
		Damage = dmginfo:GetDamage( ) * 0.95 ,
		HullSize = 2 ,
		Attacker = attacker
	}

	bullet.Callback = function( a , b , c )
		if ( self.Ricochet ) then return self:RicochetCallback( bouncenum + 1 , a , b , c ) end
	end

	timer.Simple( 0.01 , function( )
		attacker.FireBullets( attacker , bullet , true )
	end )

	return {
		damage = true ,
		effects = DoDefaultEffect
	}
end --	Controls ricochets

function SWEP:BPenetration( a , b , c )
	return self:RicochetCallback( 0 , a , b , c )
end --	Tech for penetration


		if self:Clip1( ) <= 0 then
			self:SetVNTSBRoundInChamber( false )
		else
			self:SetVNTSBRoundInChamber( true )
		end
		
	if CLIENT then
	
		--	Set a delay on our fire time so we aren't shooting while reloading
		self:SetNextPrimaryFire( CurTime( ) + self.Owner:GetViewModel( ):SequenceDuration( ) )
		self:SetNextSecondaryFire( CurTime( ) + self.Owner:GetViewModel( ):SequenceDuration( ) )
		
		self.ActionDelay = ( CurTime( ) + self.Owner:GetViewModel( ):SequenceDuration( ) )
		
	end

		elseif (self.Owner:KeyReleased( IN_RELOAD ) and  self:GetVNTSBShotgunRel( ) == true ) and self:Clip1() >= self.Primary.ClipSize or self:Ammo1() <= 0 then
			self:EndSGReload( )
			
		if self.Owner:KeyDown( IN_RELOAD ) then
			if self:GetVNTSBScopedIn( ) == true then
				self.Owner:DrawViewModel( true )
			end
	
			if self.ShellReload == true then
				if self.ActionDelay and CurTime() >= self.ActionDelay then
					if self:Clip1() >= self.Primary.ClipSize or self:Ammo1() <= 0 then
						self:SendWeaponAnim( ACT_SHOTGUN_RELOAD_FINISH )
						self.ActionDelay = nil
						self:SetVNTSBShotgunRel( false )
						self:SetNextPrimaryFire(CurTime() + self.Owner:GetViewModel():SequenceDuration() - 0.2)
						self:SetNextSecondaryFire(CurTime() + self.Owner:GetViewModel():SequenceDuration() - 0.2)
					elseif self:Clip1() < self.Primary.ClipSize and self:Ammo1() > 0 then
						self:SendWeaponAnim(ACT_VM_RELOAD)
						self.ActionDelay = CurTime() + self.Owner:GetViewModel():SequenceDuration()
						self:SetNextPrimaryFire(CurTime() + self.Owner:GetViewModel():SequenceDuration() - 0.2)
						self:SetNextSecondaryFire(CurTime() + self.Owner:GetViewModel():SequenceDuration() - 0.2)
						self:SetClip1(self:Clip1() + 1)
						self.Owner:RemoveAmmo( 1, self.Primary.Ammo )
					end
				end
			end
		end

		if self.Owner:KeyReleased( IN_RELOAD ) and self:GetVNTSBShotgunRel( ) == true then
			self:EndSGReload( )
		end
		
		
		--	Else if mag is greater or equal to cap
		if ( self.Owner:KeyReleased( IN_RELOAD ) ) then
			if ( self.WeaponType == 4 ) or self:Clip1( ) >= self.Primary.ClipSize then
				--	If we have a finish sound defined
				if self.SND_ShotgunReloadEnd ~= nil then
					--	Play a finish sound
					self:EmitSound( self.SND_ShotgunReloadEnd )
				end

				--	Turn off reloading
				self:SetVNTSBShotgunRel( false )
				--	Play an anim
				self:SendWeaponAnim( ACT_SHOTGUN_RELOAD_FINISH )
				--	add a delay
				self:SetNextPrimaryFire( BTime )
				self:SetNextSecondaryFire( BTime )
				--	Add a delay before the next shell
				self.ActionDelay = BTime
			end
		end

			if self.WeaponType == 4 and self:Clip1( ) < self.Primary.ClipSize then
				--	If mag is less than max and we have ammo
				if ( self:Clip1( ) < self.Primary.ClipSize ) and ( ETime ) and ( self.Owner:GetAmmoCount( self.Primary.Ammo ) > 0 ) then
					if self:Clip1( ) > self.Primary.ClipSize then
						self:SetClip1( self.Primary.ClipSize )
					end

					self:SetVNTSBShotgunRel( true )

					if ( self:GetVNTSBShotgunRel( ) == true ) then
						--	Play our anim
						self:SendWeaponAnim( ACT_SHOTGUN_RELOAD_START )

						--	If we have a foley sound defined
						if self.SND_ShotgunReloadStart ~= nil then
							--	Play a foley sound
							self:EmitSound( self.SND_ShotgunReloadStart )
						end

						--	Add a delay
						self:SetNextPrimaryFire( BTime )
						self:SetNextSecondaryFire( BTime )
						--	Add a delay
						self.ActionDelay = BTime

						--	If curtim > anim time
						if DTime then
							--	if ammo 1 <= 0 then
							if ( self.Owner:GetAmmoCount( self.Primary.Ammo ) <= 0 ) then
								--	Turn off reloading
								self:SetVNTSBShotgunRel( false )

								-- exit
								return false
							else
								--	else we have ammo
								--	after our anim time
								self:SendWeaponAnim( ACT_VM_RELOAD )

								timer.Simple( ATime , function( )
									--	If we have a shell sound defined
									if self.SND_ShotgunShellInsert ~= nil then
										--	Play a foley sound
										self:EmitSound( self.SND_ShotgunShellInsert )
									end

									--	play anim
									--	remove one shell
									self.Owner:RemoveAmmo( 1 , self.Primary.Ammo , false )
									--	Add one to the mag
									self:SetClip1( self:Clip1( ) + 1 )
									--	add a delay
									self:SetNextPrimaryFire( BTime )
									self:SetNextSecondaryFire( BTime )
									--	Add a delay before the next shell
									self.ActionDelay = BTime
								end )
							end
						end

						return false
					end
				end
			end
			
function SWEP:ToggleFireMode( )
	
	--	If we're owner, a player, valid, and alive, and our gun has fire modes, and the toggle timer is expired then

	if self.Owner and self.Owner:IsPlayer( ) and self.Owner:IsValid( ) and self.Owner:Alive( ) and self.ActionDelay <= CurTime( ) then

		if self:GetVNTSBIronSighted( ) == true and self.Owner:GetViewModel( ):SelectWeightedSequence( ACT_VM_IFIREMODE ) then
			
			--	Play our specified anim
			self:SendWeaponAnim( ACT_VM_IFIREMODE )

		end
		
		if self.CurrentMode < 3 then
			self:ToggleHolster()
		end
		
		
		--self.CurrentMode = self.CurrentMode + 1

		--	Cycle to the next mode
		if self.CurrentMode <= 1 and self.FireMode[ 2 ] == true then
		
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode <= 1" )
				end
				
			if self:GetVNTSBHolstered() == true then
			
				self:ToggleHolster( )
				
				if CLIENT then	self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode Holster Out" )	end
				
			elseif self.Owner:GetViewModel( ):SelectWeightedSequence( ACT_VM_FIREMODE ) then
			
				--	Play our specified anim
				self:SendWeaponAnim( ACT_VM_FIREMODE )
				
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode Anim Block 1" )
				end
			end

			if self.FireMode[ 2 ] == true then
				
				--	Tell our player that he's in Semi-Auto
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "1 - Semi-Auto" )
				end

				--	Emit our switch sound
				self:EmitSound( "Weapon_SMG1.Special1" )
				
			elseif self.FireMode[ 2 ] == false then
			
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode 1 > 2" )
				end
				
				self.CurrentMode = 2
				
			end

		elseif self.CurrentMode == 2 and self.FireMode[ 3 ] == true then
			
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode 2" )
				end
				

			if self.FireMode[ 3 ] == true then
				
				--	If burst fire is true, and current mode is 2 then
				--	Tell our player that he's in Burst
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , self.BurstCount .. " - Burst" )
				end

				--	Emit our switch sound
				self:EmitSound( "Weapon_SMG1.Special1" )
				
			elseif self.FireMode[ 3 ] == false then
			
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode 2 > 3" )
				end
				
				self.CurrentMode = 3
				
			end
			
		elseif self.CurrentMode == 3 and self.FireMode[ 4 ] == true then

			if self.FireMode[ 4 ] == true then
				
				--	If auto fire is true, and current mode is 3 then
				--	Tell our player that he's in Automatic
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "A - Automatic" )
				end

				--	Emit our switch sound
				self:EmitSound( "Weapon_SMG1.Special1" )
				
			elseif self.FireMode[ 4 ] == false then
			
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode 3 > 4" )
				end
				
				self.CurrentMode = 4
				
			end

		elseif self.CurrentMode == 4 then
		
			--	If current mode is 4 then
			--	Toggle our holster
			
			self:ToggleHolster( )

			--	Tell our player that he's in Safety
			
			if CLIENT then
			
				self.Owner:PrintMessage( HUD_PRINTTALK , "S - Safety" )
				
			end

			--	Emit our switch sound
			
			self:EmitSound( "Weapon_SMG1.Special2" )
			
		elseif self.CurrentMode < 4 then
		
				if CLIENT then
					self.Owner:PrintMessage( HUD_PRINTTALK , "Fire Mode > 4" )
				end
				
			--	If we're too large, reset it
			
			self.CurrentMode = 1
			
		end

	end
end --	Change our fire modes

		if self.CurrentMode ~= 4 then
			--	If we're iron sighted and we have mode anims for irons then
			if self:GetVNTSBIronSighted( ) == true and self.Owner:GetViewModel( ):SelectWeightedSequence( ACT_VM_IFIREMODE ) then
				--	Play our specified anim
				self:SendWeaponAnim( ACT_VM_IFIREMODE )
			elseif self:GetVNTSBIronSighted( ) == false and self.Owner:GetViewModel( ):SelectWeightedSequence( ACT_VM_FIREMODE ) then
				--	Play our specified anim
				self:SendWeaponAnim( ACT_VM_FIREMODE )
			elseif self.Owner:GetViewModel( ):SelectWeightedSequence( ACT_VM_UNDEPLOY ) then
				--	else we aren't iron sighted or we don't have mode iron anims
				--	Play our specified normal switch fire anim
				self:SendWeaponAnim( ACT_VM_UNDEPLOY )
			end

AddCSLuaFile()
if not VNTCB then 
	Error("V92 Content Bases not mounted: Removing Weapon")
	return false 
end


AddCSLuaFile()
if not VNTCB then 
	Error("V92 Content Bases not mounted: Removing Entity")
	return false 
end


		if self.WEPTYPE == 6 then
			self:SendWeaponAnim( ACT_VM_PRIMARYATTACK )
			self:SetNextPrimaryFire(CurTime() + self.Owner:GetViewModel():SequenceDuration())
			self:SetNextSecondaryFire(CurTime() + self.Owner:GetViewModel():SequenceDuration())

			self:TakePrimaryAmmo(1)
			self:FireViewPunches()
			self:SetVNTSBLchrLoaded(false)
			self:EmitSound(self.PRISND)
			if SERVER then
				local LaunchedGren = ents.Create( self.GLENT )
					LaunchedGren:SetPos(self.Owner:GetShootPos() + self.Owner:EyeAngles():Right()*0)
					LaunchedGren:SetAngles(self.Owner:EyeAngles() + Angle(0,180,0))
					LaunchedGren:SetOwner(self.Owner)
					LaunchedGren:Spawn()
					LaunchedGren:Activate()
					LaunchedGren:SetVelocity(self.Owner:EyeAngles():Forward()*self.GLFORCE + Vector(0,0,50))
			end
		else
		
		function SWEP:AnimForce(STRING)
	if !STRING then return end
	local _P = LocalPlayer and LocalPlayer() or self.Owner
	local _VM = _P:GetViewModel()
	if IsValid(_VM) then
		local STRINGINT = tonumber(STRING)
		if !STRINGINT then return end
		local INT = _VM:SelectWeightedSequence(STRINGINT)
		if !INT then return end
		_VM:SendViewModelMatchingSequence(INT)
	end
end
function SWEP:AnimPick()
	--	Check and see if the player's valid and all that shit
	if self.Owner and self.Owner:IsPlayer() and self.Owner:IsValid() and self.Owner:Alive() then
		
		if self.AnimIdling == true then
			local _T = ACT_VM_IDLE -- Default

			if self.HASSEQ[ACT_VM_IDLE_SILENCED] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_IDLE_SILENCED
			elseif self.HASSEQ[ACT_VM_IDLE_EMPTY] and (self:Clip1()==0) then
				_T = ACT_VM_IDLE_EMPTY
			else
				_T = ACT_VM_IDLE
			end
		end
		
		if self.AnimDrawing == true then
			local _T = ACT_VM_DRAW -- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_DRAW_SILENCED] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_DRAW_SILENCED
			elseif self.HASSEQ[ACT_VM_DRAW_EMPTY] and (self:Clip1()==0) then
				_T = ACT_VM_DRAW_EMPTY
			else
				_T = ACT_VM_DRAW
			end
		end
		
		if self.AnimHolstering == true then
			local _T = ACT_VM_HOLSTER -- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_HOLSTER_SILENCED] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_HOLSTER_SILENCED
			elseif self.HASSEQ[ACT_VM_HOLSTER_EMPTY] and (self:Clip1()==0) then
				_T = ACT_VM_HOLSTER_EMPTY
			else
				_T = ACT_VM_HOLSTER
			end
		end

		if self.AnimDryFire == true then
			local _T = ACT_VM_DRYFIRE-- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_DRYFIRE_SILENCED] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_DRYFIRE_SILENCED
			else
				_T = ACT_VM_DRYFIRE
			end
		end

		if self.AnimPrimaryFire == true then
			local _T -- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_PRIMARYATTACK_SILENCED] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_PRIMARYATTACK_SILENCED
			elseif self.HASSEQ[ACT_VM_PRIMARYATTACK_EMPTY] and (self:Clip1()==1) then
				_T = ACT_VM_PRIMARYATTACK_EMPTY
			elseif self.HASSEQ[ACT_VM_DRYFIRE] and (self:Clip1()==0) then
				_T = ACT_VM_DRYFIRE
			elseif self.HASSEQ[ACT_VM_PRIMARYATTACK_1] and (self:GetVNTSBIronSighted()	 == true) then
				_T = ACT_VM_PRIMARYATTACK_1
			else
				_T = ACT_VM_PRIMARYATTACK
			end
		end

		if self.AnimSecondaryFire == true then
			local _T = ACT_VM_SECONDARYATTACK -- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_DRYFIRE_LEFT] and (self:Clip1()==0) then
				_T = ACT_VM_DRYFIRE_LEFT
			else
				_T = ACT_VM_SECONDARYATTACK
			end
		end

		if self.AnimReloading == true then
			local _T -- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_RELOAD_SILENCED] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_RELOAD_SILENCED
			elseif self.HASSEQ[ACT_VM_RELOAD_EMPTY] and (self:Clip1()==0) then
				_T = ACT_VM_RELOAD_EMPTY
			else
				_T = ACT_VM_RELOAD
			end
		end

		if self.AnimReloadingSG == true then
			local _T = ACT_SHOTGUN_RELOAD_START -- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_RELOAD_SILENCED] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_RELOAD_SILENCED
			elseif self.HASSEQ[ACT_VM_RELOAD_EMPTY] and (self:Clip1()==0) then
				_T = ACT_VM_RELOAD_EMPTY
			else
				_T = ACT_VM_RELOAD
			end
		end

		if self.AnimSuppressorToggle == true then
			local _T -- Default
			local SUCCESS = true -- Default

			if self.HASSEQ[ACT_VM_DETACH_SILENCER] and self:GetVNTSBSuppressed() == true then
				_T = ACT_VM_DETACH_SILENCER
			elseif self.HASSEQ[ACT_VM_ATTACH_SILENCER] and self:GetVNTSBSuppressed() == false then
				_T = ACT_VM_ATTACH_SILENCER
			end
		end

		print(_T)

		self:SendWeaponAnim(_T)

		if game.SinglePlayer() then
			self:CallOnClient("AnimForce",_T)
		end

		self.LASTACT = _T
		self:CallOnClient("UpdateLastAct",tostring(self.LASTACT))
		return SUCCESS, _T
	end
end

else

	function VNTEnterVehicleHolster(ply,vehicle)
		if(vehicle) then
			local wep = ply:GetActiveWeapon()
			if IsValid(wep) && string.find(wep:GetClass(),"v92") then
				self:SetVNTSBHolstered(true)
			end
		end
	end
	hook.Add( "PlayerEnteredVehicle", "VNTEnterVehicleHolster", VNTEnterVehicleHolster )
	
	
SWEP.GUNMAKER		= VNTCB.infoMakerColt			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerSpring			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerWinchest		--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerRemington		--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerHK				--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerBT				--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerGlock			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerCZ				--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerSteyr			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerSOG			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerKimber			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerIMI			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerNorinco		--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerTula			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerIZH			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerLambda			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerCombine		--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerVNT			--	(String)	Gun company that makes this weapon
SWEP.GUNMAKER		= VNTCB.infoMakerMisc			--	(String)	Gun company that makes this weapon


SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryUSA			--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryUSSR			--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryGer			--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryGerW			--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryGerE			--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryChina		--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryBelgium		--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryAustria		--	(String)	Country of origin
SWEP.ORIGINCOUNTRY	= VNTCB.infoCountryIsrael		--	(String)	Country of origin

SWEP.MAGNAME		= VNTCB.magThirtyEightySpecialMoon	--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magColtFortyFive		--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magTMPNine				--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magIMIFivFivSixN		--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magHKSevSixTwoN			--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magHKNineNineteenUSP	--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magHKNineNineteenMPFive	--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magSevSixTwoFivFourStr	--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magSTANAG				--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.MAGNAME		= VNTCB.magSevSixTwoThirNine	--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System

SWEP.PRIMAGNAME		= "H&K 7.62 NATO Magazine"		--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.PRIMAGNAME		= "M1911 Magazine"				--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System
SWEP.PRIMAGNAME		= "TMP9 Magazine"				--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System

SWEP.MAGNAME		= "Magazine"		--	(String)	The name of the magazine the weapon uses - used in my Weapon Magazine System

SWEP.INSTRUCTIONS	= "Uses " .. SWEP.PRIAMMONAME


SWEP.AMMONAME		= VNTCB.ammoThirtyEightSpecial	--	(String)	The name to be displayed when picking up this ammo
SWEP.AMMONAME		= VNTCB.ammoSevSixTwoFivFour	--	(String)	The name to be displayed when picking up this ammo
SWEP.AMMONAME		= VNTCB.ammoFiveFiveSixNATO		--	(String)	The name to be displayed when picking up this ammo
SWEP.AMMONAME		= VNTCB.ammoSevenSixTwoNATO		--	(String)	The name to be displayed when picking up this ammo
SWEP.AMMONAME		= VNTCB.ammoNineNineteenNATO	--	(String)	The name to be displayed when picking up this ammo
SWEP.AMMONAME		= "7.62x54mm Warsaw Pact Ammo"	--	(String)	The name to be displayed when picking up this ammo
SWEP.AMMONAME		= ".38 Special Ammo"			--	(String)	The name to be displayed when picking up this ammo
SWEP.AMMONAME		= "9x19mm NATO Ammo"			--	(String)	The name to be displayed when picking up this ammo


SWEP.SLOTBUCKET		= VNTCB.bktMelee				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktTool				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktUtility				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktPistol				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktRevolver				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktDual				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktSMG				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktCarbine				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktRifle				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktLMG				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktSniper				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktShotgun				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktGrenade				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktMine				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktExplosive				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktSupport				--	(Integer)	Bucket to place weapon in, 1 to 6
SWEP.SLOTBUCKET		= VNTCB.bktLauncher				--	(Integer)	Bucket to place weapon in, 1 to 6



	
	bktMelee = 1,
	bktTool = 1,
	bktUtility = 1,
	bktPistol = 2,
	bktRevolver = 2,
	bktDual = 2,
	bktSMG = 3,
	bktCarbine = 3,
	bktRifle = 3,
	bktLMG = 3,
	bktSniper = 3,
	bktShotgun = 3,
	bktGrenade = 4,
	bktMine = 4,
	bktExplosive = 4,
	bktSupport = 4,
	bktLauncher = 5,
	
	
	--[[
if SERVER then
	--	Standard bullets
	game.AddAmmoType( { name = "38special", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "40sw", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "45acp", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "50bmg", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "50ae", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "46x30mm", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "57x28mm", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "556x45mmnato", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "762x51mmnato", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "9x19mmnato", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "68x43mm", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "68mmcl", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "10mmauto", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "12gauge", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "20gauge", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "9x18mmwp", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "545x39mmwp", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "762x25mmwp", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "762x39mmwp", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	game.AddAmmoType( { name = "762x54mmwp", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	--	Weird shit
	game.AddAmmoType( { name = "plasticbullets", dmgtype = DMG_BULLET, tracer = TRACER_LINE_AND_WHIZ } )
	--	Explosives
	game.AddAmmoType( { name = "40x46mmgrenade", dmgtype = DMG_BLAST, tracer = TRACER_NONE } )
	game.AddAmmoType( { name = "bazookarocket", dmgtype = DMG_BLAST, tracer = TRACER_NONE } )
	game.AddAmmoType( { name = "vog25grenade", dmgtype = DMG_BLAST, tracer = TRACER_NONE } )
	--	Non-weapon stuff
	game.AddAmmoType( { name = "medbag", dmgtype = DMG_CLUB, tracer = TRACER_NONE } )
	game.AddAmmoType( { name = "ammobag", dmgtype = DMG_CLUB, tracer = TRACER_NONE } )
	game.AddAmmoType( { name = "batteries", dmgtype = DMG_CLUB, tracer = TRACER_NONE } )
elseif CLIENT then
	--	Standard bullets
	language.Add( "38special_ammo", ".38 Special" )
	language.Add( "40sw_ammo", ".40 S&W" )
	language.Add( "45acp_ammo", ".45 ACP" )
	language.Add( "50bmg_ammo", ".50 BMG" )
	language.Add( "50ae_ammo", ".50 AE" )
	language.Add( "46x30mm_ammo", "4.6x30mm" )
	language.Add( "57x28mm_ammo", "5.7x28mm" )
	language.Add( "556x45mmnato_ammo", "5.56x45mm NATO" )
	language.Add( "762x51mmnato_ammo", "7.62x51mm NATO" )
	language.Add( "9x19mmnato_ammo", "9x19mm NATO" )
	language.Add( "68x43mm_ammo", "6.8x43mm" )
	language.Add( "68cl_ammo", "6.8mm Caseless" )
	language.Add( "10Auto_ammo", "10mm Auto" )
	language.Add( "12GBuck_ammo", "12-Gauge Buckshot" )
	language.Add( "20GBuck_ammo", "20-Gauge Buckshot" )
	language.Add( "9x18mmWP_ammo", "9x18mm Warsaw Pact" )
	language.Add( "545x39mmWP_ammo", "5.45x39mm Warsaw Pact" )
	language.Add( "762x25mmWP_ammo", "7.62x25mm Warsaw Pact" )
	language.Add( "762x39mmWP_ammo", "7.62x39mm Warsaw Pact" )
	language.Add( "762x54mmWP_ammo", "7.62x54mm Warsaw Pact" )
	--	Weird shit
	language.Add( "AMen_ammo", "Plastic Bullets" )
	--	Explosives
	language.Add( "40x46mm_ammo", "40x46mm NATO Grenade" )
	language.Add( "VOG25_ammo", "VOG-25 Grenade" )
	language.Add( "Bazooka_ammo", "Bazooka Rocket" )
	--	Non-weapon stuff
	language.Add( "MedBag_ammo", "Medical Kit" )
	language.Add( "AmmoBag_ammo", "Ammo Kit" )
	language.Add( "Batteries_ammo", "Batteries" )
end
--]]

--	Grenades & Rockets
--game.AddAmmoType(	{	name	=	"m18grenade",	dmgtype	=	DMG_GENERIC	}	)
--game.AddAmmoType(	{	name	=	"m67grenade",	dmgtype	=	DMG_BLAST	}	)
--game.AddAmmoType(	{	name	=	"mk2frag",		dmgtype	=	DMG_BLAST	}	)
--game.AddAmmoType(	{	name	=	"rgd5grenade",	dmgtype	=	DMG_BLAST	}	)
--game.AddAmmoType(	{	name	=	"rpg7rocket",	dmgtype	=	DMG_BLAST	}	)
--	Explosives & IEDs
--game.AddAmmoType(	{	name	=	"c4",			dmgtype	=	DMG_BLAST	}	)
--game.AddAmmoType(	{	name	=	"m15mine",		dmgtype	=	DMG_BLAST	}	)
--game.AddAmmoType(	{	name	=	"M18mine",		dmgtype	=	DMG_BLAST	}	)
--game.AddAmmoType(	{	name	=	"ied",			dmgtype	=	DMG_BLAST	}	)
--	Black Powder
--game.AddAmmoType(	{	name	=	"36ball",		dmgtype	=	DMG_BULLET	}	)
--game.AddAmmoType(	{	name	=	"41short",		dmgtype	=	DMG_BULLET	}	)
--game.AddAmmoType(	{	name	=	"44henry",		dmgtype	=	DMG_BULLET	}	)
--game.AddAmmoType(	{	name	=	"4570",			dmgtype	=	DMG_BULLET	}	)
--game.AddAmmoType(	{	name	=	"45colt",		dmgtype	=	DMG_BULLET	}	)
--game.AddAmmoType(	{	name	=	"5090sharps",	dmgtype	=	DMG_BULLET	}	)
--game.AddAmmoType(	{	name	=	"50smith",		dmgtype	=	DMG_BULLET	}	)
	--	Standard bullets
	game.AddAmmoType( { name = "38special", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "40sw", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "45acp", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "50bmg", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "50ae", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "46x30mm", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "57x28mm", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "556x45mmnato", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "762x51mmnato", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "9x19mmnato", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "68x43mm", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "68mmcl", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "10mmauto", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "12gauge", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "20gauge", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "9x18mmwp", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "545x39mmwp", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "762x25mmwp", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "762x39mmwp", dmgtype = DMG_BULLET } )
	game.AddAmmoType( { name = "762x54mmwp", dmgtype = DMG_BULLET } )
	--	Weird shit
	game.AddAmmoType( { name = "plasticbullets", dmgtype = DMG_BULLET } )
	--	Explosives
	game.AddAmmoType( { name = "40x46mmgrenade", dmgtype = DMG_BLAST } )
	game.AddAmmoType( { name = "bazookarocket", dmgtype = DMG_BLAST } )
	game.AddAmmoType( { name = "vog25grenade", dmgtype = DMG_BLAST } )
	--	Non-weapon stuff
	game.AddAmmoType( { name = "medbag", dmgtype = DMG_CLUB } )
	game.AddAmmoType( { name = "ammobag", dmgtype = DMG_CLUB } )
	game.AddAmmoType( { name = "batteries", dmgtype = DMG_CLUB } )
if CLIENT then
	--	Standard bullets
	language.Add( "38special_ammo", ".38 Special" )
	language.Add( "40sw_ammo", ".40 S&W" )
	language.Add( "45acp_ammo", ".45 ACP" )
	language.Add( "50bmg_ammo", ".50 BMG" )
	language.Add( "50ae_ammo", ".50 AE" )
	language.Add( "46x30mm_ammo", "4.6x30mm" )
	language.Add( "57x28mm_ammo", "5.7x28mm" )
	language.Add( "556x45mmnato_ammo", "5.56x45mm NATO" )
	language.Add( "762x51mmnato_ammo", "7.62x51mm NATO" )
	language.Add( "9x19mmnato_ammo", "9x19mm NATO" )
	language.Add( "68x43mm_ammo", "6.8x43mm" )
	language.Add( "68cl_ammo", "6.8mm Caseless" )
	language.Add( "10Auto_ammo", "10mm Auto" )
	language.Add( "12GBuck_ammo", "12-Gauge Buckshot" )
	language.Add( "20GBuck_ammo", "20-Gauge Buckshot" )
	language.Add( "9x18mmWP_ammo", "9x18mm Warsaw Pact" )
	language.Add( "545x39mmWP_ammo", "5.45x39mm Warsaw Pact" )
	language.Add( "762x25mmWP_ammo", "7.62x25mm Warsaw Pact" )
	language.Add( "762x39mmWP_ammo", "7.62x39mm Warsaw Pact" )
	language.Add( "762x54mmWP_ammo", "7.62x54mm Warsaw Pact" )
	--	Weird shit
	language.Add( "AMen_ammo", "Plastic Bullets" )
	--	Explosives
	language.Add( "40x46mm_ammo", "40x46mm NATO Grenade" )
	language.Add( "VOG25_ammo", "VOG-25 Grenade" )
	language.Add( "Bazooka_ammo", "Bazooka Rocket" )
	--	Non-weapon stuff
	language.Add( "MedBag_ammo", "Medical Kit" )
	language.Add( "AmmoBag_ammo", "Ammo Kit" )
	language.Add( "Batteries_ammo", "Batteries" )
end
--]]


--[[
local AmmoTypes = {
	[".38 Special"] = {
		name = "38special",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	[".40 S&W"] = {
		name = "40sw",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	[".45 ACP"] = {
		name = "45acp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	[".50 BMG"] = {
		name = "50bmg",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	[".50 AE"] = {
		name = "50ae",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["4.6x30mm"] = {
		name = "46x30mm",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["5.7x28mm"] = {
		name = "57x28mm",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["5.56x45mm NATO"] = {
		name = "556x45mmnato",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["7.62x51mm NATO"] = {
		name = "762x51mmnato",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["9x19mm NATO"] = {
		name = "9x19mmnato",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["6.8x43mm"] = {
		name = "68x43mm",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["6.8mm Caseless"] = {
		name = "68mmcl",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["10mm Auto"] = {
		name = "10mmauto",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["9x18mm Warsaw Pact"] = {
		name = "9x18mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["5.45x39mm Warsaw Pact"] = {
		name = "545x39mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["7.62x25mm Warsaw Pact"] = {
		name = "762x25mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["7.62x39mm Warsaw Pact"] = {
		name = "762x39mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["7.62x54mm Warsaw Pact"] = {
		name = "762x54mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["Plastic Bullets"] = {
		name = "plasticbullets",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["12-Gauge Buckshot"] = {
		name = "12gauge",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["20-Gauge Buckshot"] = {
		name = "20gauge",
		dmgtype = DMG_BULLET,
		tracer = TRACER_LINE_AND_WHIZ,
	},
	["40x46mm NATO Grenade"] = {
		name = "40x46mmgrenade",
		dmgtype = DMG_BLAST,
		tracer = TRACER_NONE,
	},
	["VOG-25 Grenade"] = {
		name = "vog25grenade",
		dmgtype = DMG_BLAST,
		tracer = TRACER_NONE,
	},
	["Bazooka Rocket"] = {
		name = "bazookarocket",
		dmgtype = DMG_BLAST,
		tracer = TRACER_NONE,
	},
	["Medical Bag"] = {
		name = "medbag",
		dmgtype = DMG_CLUB,
		tracer = TRACER_NONE,
	},
	["Ammunition Bag"] = {
		name = "ammobag",
		dmgtype = DMG_CLUB,
		tracer = TRACER_NONE,
	},
	["Batteries"] = {
		name = "batteries",
		dmgtype = DMG_CLUB,
		tracer = TRACER_NONE,
	},
}

for K, V in pairs(AmmoTypes) do
	if CLIENT then
		language.Add(V.name .. "_ammo", K)
	end	
	game.AddAmmoType(V)
	print(table.ToString(V,"Ammo",false))
end
--]]


--[[
--	Ammo types
VNTAmmo = VNTAmmo or {	
	a38S = { ".38 Special", "38special", DMG_BULLET, TRACER_NONE, 9, 12, ""  },
	a40SW = { ".40 S&W", "40sw", DMG_BULLET, TRACER_NONE, 12, 15, "fx_shell_45acp" },
	a45ACP = { ".45 ACP", "45acp", DMG_BULLET, TRACER_NONE, 13, 16, "fx_shell_45acp" },
	a50BMG = { ".50 BMG", "50bmg", DMG_BULLET, TRACER_NONE, 50, 75, "fx_shell_50bmg" },
	a50AE = { ".50 AE", "50ae", DMG_BULLET, TRACER_NONE, 25, 28, "fx_shell_50ae"  },
	aMP7 = { "4.6x30mm", "46x30mm", DMG_BULLET, TRACER_NONE, 9, 12, "fx_shell_9x19mmnato" },
	a57 = { "5.7x28mm", "57x28mm", DMG_BULLET, TRACER_NONE, 9, 12,  "fx_shell_9x19mmnato" },
	a556NATO = { "5.56x45mm NATO", "556x45mmnato", DMG_BULLET, TRACER_NONE, 15, 18, "fx_shell_556x45mmnato" },
	a762NATO = { "7.62x51mm NATO", "762x51mmnato", DMG_BULLET, TRACER_NONE, 18, 21, "fx_shell_762x51mmnato" },
	a9x19mmNATO = { "9x19mm NATO", "9x19mmnato", DMG_BULLET, TRACER_NONE, 5, 8, "fx_shell_9x19mmnato" },
	a68x43 = { "6.8x43mm", "68x43mm", DMG_BULLET, TRACER_NONE, 16, 19, "fx_shell_556x45mmnato" },
	a68cl = { "6.8 Caseless", "68mmcl", DMG_BULLET, TRACER_NONE, 16, 19, "" },
	a10Auto = { "10mm Auto", "10mmauto", DMG_BULLET, TRACER_NONE, 7, 10, "fx_shell_10mmauto" },
	a40x46mm = { "40x46mm NATO Grenade", "40x46mmgrenade", DMG_BLAST, TRACER_NONE, 1, 1, "fx_shell_40x46mm" },
	aBazooka = { "Bazooka Rocket", "bazookarocket", DMG_BLAST, TRACER_NONE, 1, 1, "" },
	aVOG25 = { "VOG-25 Grenade", "vog25grenade", DMG_BLAST, TRACER_NONE, 1, 1, "" },
	a12GBuck = { "12-Gauge Buckshot", "12gauge", DMG_BULLET, TRACER_NONE, 15, 18, "fx_shell_12gauge" },
	a20GBuck = { "20-Gauge Buckshot", "20gauge", DMG_BULLET, TRACER_NONE, 17, 20, "fx_shell_12gauge" },
	
	a9x18mmWP = { "9x18mm Warsaw Pact", "9x18mmwp", DMG_BULLET, TRACER_NONE, 5, 8, "fx_shell_9x18mmwp" },
	a545x39mmWP = { "5.45x39mm Warsaw Pact", "545x39mmwp", DMG_BULLET, TRACER_NONE, 15, 18, "fx_shell_545x39mmwp" },
	a762x25mmWP = { "7.62x25mm Warsaw Pact", "762x25mmwp", DMG_BULLET, TRACER_NONE, 12, 15, "fx_shell_762x39mmwp" },
	a762x39mmWP = { "7.62x39mm Warsaw Pact", "762x39mmwp", DMG_BULLET, TRACER_NONE, 20, 23, "fx_shell_762x39mmwp" },
	a762x54mmWP = { "7.62x54mm Warsaw Pact", "762x54mmwp", DMG_BULLET, TRACER_NONE, 23, 26 },
	aAMen = { "Plastic Bullets", "plasticbullets", DMG_BULLET, TRACER_NONE, 4, 4, "fx_shell_556x45mmnato" },
	aMedBag = { "Medical Kit", "medbag", DMG_CLUB, TRACER_NONE, 1, 1, "" },
	aAmmoBag = { "Ammo Kit", "ammobag", DMG_CLUB, TRACER_NONE, 1, 1, "" },
	aBatteries = { "Batteries", "batteries", DMG_CLUB, TRACER_NONE, 1, 1, "" },
}
--]]

local AmmoTypes = {
	[".38 Special"] = {
		name = "38special",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	[".40 S&W"] = {
		name = "40sw",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	[".45 ACP"] = {
		name = "45acp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	[".50 BMG"] = {
		name = "50bmg",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	[".50 AE"] = {
		name = "50ae",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["4.6x30mm"] = {
		name = "46x30mm",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["5.7x28mm"] = {
		name = "57x28mm",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["5.56x45mm NATO"] = {
		name = "556x45mmnato",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["7.62x51mm NATO"] = {
		name = "762x51mmnato",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["9x19mm NATO"] = {
		name = "9x19mmnato",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["6.8x43mm"] = {
		name = "68x43mm",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["6.8mm Caseless"] = {
		name = "68mmcl",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["10mm Auto"] = {
		name = "10mmauto",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["9x18mm Warsaw Pact"] = {
		name = "9x18mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["5.45x39mm Warsaw Pact"] = {
		name = "545x39mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["7.62x25mm Warsaw Pact"] = {
		name = "762x25mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["7.62x39mm Warsaw Pact"] = {
		name = "762x39mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["7.62x54mm Warsaw Pact"] = {
		name = "762x54mmwp",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["Plastic Bullets"] = {
		name = "plasticbullets",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["12-Gauge Buckshot"] = {
		name = "12gauge",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["20-Gauge Buckshot"] = {
		name = "20gauge",
		dmgtype = DMG_BULLET,
		tracer = TRACER_NONE,
	},
	["40x46mm NATO Grenade"] = {
		name = "40x46mmgrenade",
		dmgtype = DMG_BLAST,
		tracer = TRACER_NONE,
	},
	["VOG-25 Grenade"] = {
		name = "vog25grenade",
		dmgtype = DMG_BLAST,
		tracer = TRACER_NONE,
	},
	["Bazooka Rocket"] = {
		name = "bazookarocket",
		dmgtype = DMG_BLAST,
		tracer = TRACER_NONE,
	},
	["Medical Bag"] = {
		name = "medbag",
		dmgtype = DMG_CLUB,
		tracer = TRACER_NONE,
	},
	["Ammunition Bag"] = {
		name = "ammobag",
		dmgtype = DMG_CLUB,
		tracer = TRACER_NONE,
	},
	["Batteries"] = {
		name = "batteries",
		dmgtype = DMG_CLUB,
		tracer = TRACER_NONE,
	},
}

for K, V in pairs(AmmoTypes) do
	if CLIENT then
		language.Add(V.name .. "_ammo", K)
	end	
	game.AddAmmoType(V)
end




function RPlayer:GetAmmoCount(NAME)
	if table.HasValue(NORMAL_AMMO, NAME) then
		return OLD_GETAMMO(self, NAME)
	end
end


--	Ammo types
VNTAmmo = VNTAmmo or {
	a38S = ".38 Special" ,
	a40SW = ".40 S&W" ,
	a45ACP = ".45 ACP" ,
	a50BMG = ".50 BMG" ,
	a50ae = ".50 AE" ,
	aMP7 = "4.6x30mm" ,
	a57 = "5.7x28mm" ,
	a556NATO = "5.56x45mm NATO" ,
	a762NATO = "7.62x51mm NATO" ,
	a9x19mmNATO = "9x19mm NATO" ,
	a10Auto = "10mm Auto" ,
	a40x46mm = "40x46mm NATO Grenade" ,
	aBazooka = "Bazooka Rocket" ,
	a12GBuck = "12-Gauge Buckshot" ,
	a20GBuck = "20-Gauge Buckshot" ,
	a9x18mmWP = "9x18mm Warsaw Pact" ,
	a545x39mmWP = "5.45x39mm Warsaw Pact" ,
	a762x39mmWP = "7.62x39mm Warsaw Pact" ,
	a762x39mmWP = "7.62x54mm Warsaw Pact" ,
	aVOG25 = "VOG-25 Grenade" ,
	aAMen = "Plastic Bullets" ,
	aMedBag = "Medical Kit" ,
	aAmmoBag = "Ammo Kit"
}

VNTAmmoType = VNTAmmoType or {
	t38S = "38special" ,
	t40SW = "40sw" ,
	t45ACP = "45acp" ,
	t50BMG = "50bmg" ,
	t50ae = "50ae" ,
	tMP7 = "46x30mm" ,
	t57 = "57x28mm" ,
	t556NATO = "556x45mmnato" ,
	t762NATO = "762x51mmnato" ,
	t9x19mmNATO = "9x19mmnato" ,
	t10Auto = "10mmauto" ,
	t40x46mm = "40x46mmgrenade" ,
	tBazooka = "bazookarocket" ,
	t12GBuck = "12gauge" ,
	t20GBuck = "20gauge" ,
	t9x18mmWP = "9x18mmwp" ,
	t545x39mmWP = "545x39mmwp" ,
	t762x39mmWP = "762x39mmwp" ,
	t762x39mmWP = "762x54mmwp" ,
	tVOG25 = "vog25grenade" ,
	tAMen = "plasticbullets" ,
	tMedBag = "medbag"
}

--[[
	if ((game.SinglePlayer and SERVER) or (not game.SinglePlayer and CLIENT)) then
		local eyeang = self.Owner:EyeAngles()
		if bool == true then
			if self:GetVNTSBIronSighted() == true and self:GetVNTSBBipod() == false then
				eyeang.pitch = eyeang.pitch - int*self.CrouchPane*0.3
			elseif self:GetVNTSBIronSighted() == true and self:GetVNTSBBipod() == true then
				eyeang.pitch = eyeang.pitch - int*self.CrouchPane*0.15
			elseif not self.Ironsighted and self:GetVNTSBBipod() == true then
				eyeang.pitch = eyeang.pitch - int*self.CrouchPane*0.225
			else
				eyeang.pitch = eyeang.pitch - int*self.CrouchPane*0.5
			end
		else
			if self:GetVNTSBIronSighted() == true and self:GetVNTSBBipod() == false then
				eyeang.pitch = eyeang.pitch - int*0.3
			elseif self:GetVNTSBIronSighted() == true and self:GetVNTSBBipod() == true then
				eyeang.pitch = eyeang.pitch - int*0.15
			elseif not self.Ironsighted and self:GetVNTSBBipod() == true then
				eyeang.pitch = eyeang.pitch - int*0.225
			else
				eyeang.pitch = eyeang.pitch - int*0.5
			end
		end
		self.Owner:SetEyeAngles(eyeang)
	end
	--]]