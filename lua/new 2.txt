[code]
SWEP.SCOPETYPE		= 0								--	(Integer)	Type of scope, 0=none, 1=overlay, 2=Render Target
SWEP.SCOPEMAT		= 0								--	(Integer)	Type of overlay, 0=Red Dot, 1=EOTech, 2=ACOG, 3=SVD, 4=M14, 5=L42A1, 6=PSG1, 7=German tri-bar
SWEP.SCOPEMUL		= { 8, 4 }						--	(Table: Float, Float)	X magnification of the scope, ACOG would 4, etc.
SWEP.SCOPESCALE		= 0.5							--	(Float)		Scale of the scope overlay
SWEP.DEFZOOM		= 1								--	(Float)		Current zoom, default to 1; DON'T CHANGE
SWEP.BOLTACTION		= false							--	(Boolean)	Is this bolt action? Removes the player from the scope after firing
SWEP.RETURNTOSCOPE	= false							--	(Boolean)	Return to scope after cycling the bolt?
SWEP.HASVARZOOM		= false							--	(Boolean)	Does the weapon have variable zoom?

if self.SCOPEDCLOSE == true then
	self.DEFZOOM = self.SCOPEMUL[2]
else
	self.DEFZOOM = self.SCOPEMUL[1]
end
[/code]

[code]
local texFSB = render.GetSuperFPTex() -- Full screen render target
local oldRT = nil
local scopemat = Material( "models/jessev92/css/weapons/heat/hk91/lense_rt" )
local camdata = {}

local scopeattach = nil
local scopeaim = nil
local viewmodel = nil

local zoomtoggle = SWEP.SCOPEDCLOSE
local scopemul = SWEP.SCOPEMUL
local defzoom = SWEP.DEFZOOM

hook.Add( "RenderScene", (SWEP.INFONAME), function()
	if LocalPlayer():GetActiveWeapon().HasRTScope then
		viewmodel = LocalPlayer():GetViewModel()
		scopeattach = viewmodel:GetAttachment( viewmodel:LookupAttachment( "scope_pov" ) )
		scopeaim = viewmodel:GetAttachment( viewmodel:LookupAttachment( "scope_align" ) )
		camdata = {
			x = 0,
			y = 0,
			w = ScrW(),
			h = ScrH(),
			angles = (scopeaim.Pos - scopeattach.Pos):Angle(),
			origin = scopeattach.Pos,
			fov = LocalPlayer():GetFOV() / defzoom,
			drawhud = false,
			drawviewmodel = false,
			ortho = false,
			dopostprocess = false,
		}
		oldRT = render.GetRenderTarget()
		render.SetRenderTarget( texFSB )
		render.Clear( 0, 0, 0, 255 )
		render.SetViewPort( 0, 0, ScrW(), ScrH() )
		cam.Start2D()
			viewmodel:SetNoDraw( true )
			render.RenderView( camdata )
			render.SetMaterial( Material( "jessev92/ui/scope/crosshair_psg1" ) )
			render.DrawScreenQuadEx( camdata.x, camdata.y, camdata.w, camdata.h )
			viewmodel:SetNoDraw( false )
		cam.End2D()
		render.SetRenderTarget( oldRT )
		render.SetViewPort( 0, 0, ScrW(), ScrH() )
	end
end )

function SWEP:CustomDrawHUD()
	scopemat:SetTexture( "$basetexture", texFSB )
end
[/code]